单链表相关：

找出单链表的倒数第K个元素（仅允许遍历一遍链表）
使用指针追赶的方法。定义两个指针fast和slow，fast先走K步，然后fast和slow同时继续走。当fast到链表尾部时，slow指向倒数第K个。
注意要考虑链表长度应该大于K。

找出单链表的中间元素（仅允许遍历一遍链表）
使用指针追赶的方法。fast每次走俩步，slow每次走一步。当fast到链表尾部时，slow指向链表的中间元素。

判断单链表是否有环？
方法一：使用指针追赶的方法。slow指针每次走一步，fast指针每次走两步。如存在环，则两者相遇；如不存在环，fast遇到NULL退出。

如何知道环的长度？
记录下碰撞点（或者找在环中任意一结点都可以），让slow从碰撞点开始，绕着环走一圈，再次到碰撞点的位置时，所走过的结点数就是环的长度s。

如何找到环的入口？
分别从碰撞点、头指针开始走，相遇的那个点就是连接点。

判断两个链表（无环）是否相交？
分别遍历两条链表，得到其长度；然后用指针在长的链表上先走直到长链表剩余的长度和短链表相同，然后同时遍历两条链表，如果他们有相同的指针，则说明相交

如何知道两个单链表（可能有环）是否相交
思路：根据两个链表是否有环来分别处理，若相交这个环属于两个链表共有
（1）如果两个链表都没有环。
（2）一个有环，一个没环。肯定不相交
（3）两个都有环。
     ①求出A的环入口，判断其是否在B链表上，如果在，则相交。
     ② 在A链表上，使用指针追赶的方法，找到两个指针碰撞点，之后判断碰撞点是否在B链表上。如果在，则相交。

链表的冒泡排序
先有两个指针，一个头指针，一个尾指针，尾指针一开始指向NULL，即链表的末尾，
第一次从头进行冒泡到尾，第二次从头冒泡到最后一个节点的前一个节点，就这样一次进行下去，一直到冒泡到第一个节点和第二个节点。
void BubbleSort(pLinkList pList)
{

    pLinkNode cur = NULL;
    pLinkNode tail = NULL;
    assert(pList);
    cur = pList->pHead;
    if ((pList->pHead == NULL)||(pList->pHead->next==NULL))
    {
        return;
    }
    while (cur != tail)     //当尾指针不等于头指针时进行冒泡
    {
        while (cur->next != tail)   //控制cur指针最后到的位置是倒数第二个节点
        {

            if (cur->data > cur->next->data)
            {
                datatype tmp = cur->data;
                cur->data = cur->next->data;
                cur->next->data = tmp;
            }
            cur = cur->next;
        }
        tail = cur;
        cur = pList->pHead;
    }
}


链表的快速排序
初始选取头结点作为flag值，pslow指向头结点，pfast指向第二个节点
保证pslow节点以及pslow节点左边的节点都<=flag值，pslow右边的节点都>flag
pfast向右边遍历，直到遇到比flag小的节点，则pslow=pslow->next，然后交换pslow与pfast节点的值，pfast继续向右遍历直到遍历完整个链表
然后将头结点的值与pslow所指向的节点的值交换，然后递归：
从头结点到pslow节点
从pslow->next到NULL

#define NODE struct ListNode
#define SWAP(a,b,type) {type c=a;a=b;b=c;}
static void quicksort(NODE* phead,NODE* pend){
             if(!phead || !(phead->next) || (phead==pend)){
                 return ;
         }
         NODE* pfast=phead->next;
         NODE* pslow=phead;
         while(pfast!=pend){
                if(pfast->val<phead->val){
                                pslow=pslow->next;
                                 /*if not equal then swap otherwise no necessary*/
                                 if(pslow->val != pfast->val)
                                 SWAP(pslow->val,pfast->val,int);
                 }
               pfast=pfast->next;
         }
         SWAP(pslow->val,phead->val,int);
         quicksort(phead,pslow);
         //quicksort(pslow->next,NULL);
         quicksort(pslow->next,pend);
}
quicksort(head,NULL);

删除无头非尾节点
把删除的节点后的节点的数据放到要删除的节点上，删除了删除的节点后的节点，然后让删除节点指向删除删除的节点后的节点后的节点。 
void EraseNotTail(pLinkNode pos)
{
    pLinkNode del = NULL;
    assert(pos->next != NULL);      //断言，排除尾节点的情况
    pos->data = pos->next->data;    //让当前节点后面节点的数据赋给当前节点。
    del = pos->next;                //删除记录当前节点后的节点
    pos->next = pos->next->next;    //当前节点的nex指向删除节点的下一个节点。
    free(del);
    del = NULL;
}

翻转链表
#define NODE struct ListNode
struct ListNode* reverseList(struct ListNode* head) {
        if(!(head)|| !(head->next)){
            //printf("empty link\n");
            return head;
        }else{
            NODE* current=(head);/*point to node 1*/
            NODE* ppre=current;/*point to node 1*/
            NODE* pnext=current->next;/*point to node 2*/
            current->next=NULL;/*node 1 next points to NULL*/
            while(pnext){/*if node 2 exists*/
                current=pnext;/*point to node 2*/
                pnext=current->next;/*get node 3*/
                current->next=ppre;/*node 2 point  to node 1*/
                ppre=current;/*get node 2*/
            }
            (head)=current;/*make head point to the last node*/
        }
return head;
}

在当前节点前插入一个数据x
把当前节点的数据放到新节点上，把要插入的数据放到当前节点上。 
这样我们就可以实现在当前节点前插入一个节点了。
void InsertFrontNode(pLinkNode pos, datatype x)
{

    pLinkNode newnode = NULL;
    assert(pos);
    newnode = (pLinkNode)malloc(sizeof(LinkNode));
    if (NULL == newnode)
    {
        printf("out of memory");
        exit(EXIT_FAILURE);
    }
    newnode->data = pos->data;
    pos->data = x;
    newnode->next = pos->next;
    pos->next = newnode;

}

删除单链表的倒数第K个节点（K>1&&K<总长度）
首先找到第K个节点，然后按照删除无头非尾的方式来删除这个节点

从尾到头打印链表，使用递归  
void RPrintList(ListNode * pHead)  
{  
    if(pHead == NULL)  
    {  
        return;  
    } else {  
        RPrintList(pHead->m_pNext);  
        printf("%d\t", pHead->m_nKey);  
    }  
}

以倒数第K个元素作为中心旋转链表
先找到倒数第K个元素，然后将两条链表分为两段，然后将链表合并成旋转后的新链表

将链表位置m和位置n之间的元素翻转
static NODE* do_reverse(NODE* pm,NODE* pn){
    NODE* current=pm;
    NODE* nx=NULL;
    NODE* pre=current;
    while(current != pn){
        nx=current->next;
        if(pre==current){
            current->next=pn->next;
        } else {
            current->next=pre;
        }
        pre=current;
        current=nx;
    }
    current->next=pre;
return pn;
}

====================================================================
//二分查找
//刚好查找到匹配的值
//不考虑重复情况
//时间复杂度logn
int binarySearch(int arr[], int len, int key)
{
    int left = 0;
    int right = len - 1;
    int mid;

    while (left <= right) {
        mid = (left + right) / 2;
        if (key < arr[mid]) {//key在左边
            right = mid - 1;
        } else if (arr[mid] < key) {//key在右边
            left = mid + 1;
        } else {
            return mid;
        }
    }
    return -1;
}

拓展情况：
while (left <= right) {
        mid = (left + right) / 2;
        if (key ??? arr[mid]) {
            right = mid - 1;
        } else {
            left = mid + 1;
        }
    }
return ???;

???分别填上：
查找最后一个小于key的元素  <= right
查找最后一个小于等于key的元素 < right
查找第一个大于key的元素 < left
查找第一个大于等于key的元素 <= left
查找第一个与key相等的元素 <=  循环外需要加上 if(left < len && arr[left] == key) {return left;}
查找最后一个与key相等的元素 < 循环外需要加上 if (right >= 0 && arr[right] == key) {return right;}

====================================================================
数组求和
int sum(int *a, int n)
{
    return n == 0 ? 0 : sum(a, n - 1) + a[n - 1];
}

====================================================================
求数组中元素的最短距离
给定一个含有n个元素的整型数组，找出数组中的两个元素x和y使得abs(x - y)值最小
先对数组排序，然后遍历一次即可

====================================================================
求两个有序数组的共同元素，数组的交集
给定两个含有n个元素的有序（非降序）整型数组a和b，求出其共同元素，比如
a = 0, 1, 2, 3, 4
b = 1, 3, 5, 7, 9
充分利用数组有序的性质，用两个指针i和j分别指向a和b，比较a[i]和b[j]，根据比较结果移动指针，则有如下三种情况
1. a[i] < b[j]，则i增加1，继续比较
2. a[i] == b[j]，则i和j皆加1，继续比较
3. a[i] < b[j]，则j加1，继续比较
重复以上过程直到i或j到达数组末尾。
void FindCommon(int* a, int* b, int n)
{
    int i = 0; 
    int j = 0 ;

    while (i < n && j < n)
    {
        if (a[i] < b[j])
            ++i ;
        else if(a[i] == b[j])
        {
            cout << a[i] << endl ;
            ++i ;
            ++j ;
        }
        else // a[i] > b[j]
            ++j ;
    }
}

====================================================================

对于在数组中进行查找的问题，可以分如下两种情况处理
1. 如果给定的数组有序，那么首先应该想到Binary Search，所需O(logn)
2. 如果给定的数组无序，那么首先应该想到对数组进行排序，很多排序算法都能在O(nlogn)时间内对数组进行排序，然后再使用二分搜索，总的时间复杂度仍是O(nlogn)。
如果能做到以上两点，大多数关于数组的查找问题，都能迎刃而解。

====================================================================
找出数组中唯一的重复元素
给定含有1001个元素的数组，其中存放了1-1000之内的整数，只有一个整数是重复的，请找出这个数
求出整个数组的和，再减去1-1000的和
====================================================================
找出出现奇数次的元素
给定一个含有n个元素的整型数组a，其中只有一个元素出现奇数次，找出这个元素。
因为对于任意一个数k，有k ^ k = 0，k ^ 0 = k，所以将a中所有元素进行异或，那么个数为偶数的元素异或后都变成了0，只留下了个数为奇数的那个元素。

====================================================================

求一个无序数组的中位数
中位数是将数组排序之后，数组个数为奇数时，取中间的即为中位数；数组个数为偶数时，取中间两个的平均值即为中位数。
思路一：
要取得中位数，即给数组排序，使用任意排序算法均可，然后按数组下标取其中位数。
PS：该方法很直观，此处不实现

思路二：
1.设数组元素为n个，且为奇数个时，取数组前（n+1）/2个元素建一个小堆
2.遍历数组剩余元素，如果比堆顶元素大即入堆，如果比堆顶元素小或等于堆顶元素，即舍弃，不入堆
3.遍历完数组元素时，堆顶即为中位数
====================================================================

求数组的最大值和最小值
1.快速排序后再获取值
2.分治法
void MaxandMin(int *a, int l, int r, int& maxValue, int& minValue)
{
    if(l == r) // l与r之间只有一个元素
    {
        maxValue = a[l] ;
        minValue = a[l] ;
        return ;
    }

    if(l + 1 == r) // l与r之间只有两个元素
    {
        if(a[l] >= a[r])
        {
            maxValue = a[l] ;
            minValue = a[r] ;
        }
        else
        {
            maxValue = a[r] ;
            minValue = a[l] ;
        }
        return ;
    }

    int m = (l + r) / 2 ; // 求中点

    int lmax ; // 左半部份最大值
    int lmin ; // 左半部份最小值
    MaxandMin(a, l, m, lmax, lmin) ; // 递归计算左半部份

    int rmax ; // 右半部份最大值
    int rmin ; // 右半部份最小值
    MaxandMin(a, m + 1, r, rmax, rmin) ; // 递归计算右半部份

    maxValue = max(lmax, rmax) ; // 总的最大值
    minValue = min(lmin, rmin) ; // 总的最小值
}
====================================================================
求数组中满足给定和的数对
给定两个含有n个元素的有序整型数组a和b，各有n个元素，求两个数组中满足给定和的数对，即对a中元素i和b中元素j，满足i + j = d(d已知)。
两个指针i和j分别指向数组的首尾，然后从两端同时向中间遍历，直到两个指针交叉。
void FixedSum(int* a, int* b, int n, int d)
{
    for (int i = 0, j = n - 1; i < n && j >= 0)
    {
        if (a[i] + b[j] < d)
            ++i ;
        else if (a[i] + b[j] == d)
        {
            ++i ;
            --j ;
        } else // a[i] + b[j] > d
            --j ;
    }
}
====================================================================
数组循环移位 
假如原数组： 1 2 3 4 5 6 7 需要右移4次，那么我们想要的结果是： 5 6 7 1 2 3 4。 
1.将1234逆置 变成 4321 
2.将567逆置 变成 765 
3.将两个逆置数组拼接： 4321765 
4.将这个已拼接的数组逆置： 5671234 就成了我们想要的结果了。

void Reverse(int *arr,int start,int end){      //逆置
    for(; start < end;start++,end--){
           int s = arr[end];
           arr[end] = arr[start];
           arr[start] = s;
      }
}

void RightShift(int* arr,int N, int K){
      K = K%N;                       //对应上文步骤
      Reverse(arr,0,K-1);           //1 
      Reverse(arr,K,N-1);           //2
      Reverse(arr,0,N-1);           //4
}

数组右移K位：
k=k%n;
array_reverse(a, 0, n-1);
array_reverse(a, 0, k-1);
array_reverse(a, k, n-1);//整个数组的最后翻转放在最后

数组左移K位：
k=k%n;
array_reverse(a, 0, k-1);//整个数组的最后翻转放在最前
array_reverse(a, k, n-1);
array_reverse(a, 0, n-1);
====================================================================
计算数字中有多少个二进制的1
int count_1(int n) {
    int count = 0x00;
    while(n) {
        count++;
        n=(n-1)&n;
    }
    return n;
}

====================================================================

如果要将整数A转换为B，需要改变多少个bit位？
先对两个数异或，得到所有两者二进制相异的位，
再求解异或之后的数的二进制值中1的个数。

====================================================================

如果n是2的幂，那么 n & (n-1) == 0

if(n&(n-1)) printf("数字%d不是2的幂\n", n);

在kfifo_init和kfifo_calloc中，kfifo->size的值总是在调用者传进来的size参数的基础上向2的幂扩展，这是内核一贯的做法。
这样的好处不言而喻--对kfifo->size取模运算可以转化为与运算，
如：kfifo->in % kfifo->size 可以转化为 kfifo->in & (kfifo->size – 1)
kfifo->size为2的幂


====================================================================

翻转整数：123 反转为 321； -123 反转为 -321
1.反转后可能溢出，此时应该返回0；

2.关于尾数为0时，应舍去；

由于采用数学方法获取各位数，并非用文本反转，所以坑2就不用考虑了，

关键是坑1，如何判别溢出呢？可以通过获取INT_MAX和INT_MIN来辅助，由于是乘法溢出，故采用将最值除上相应值，这样避免判断最值情况。

    int reverse(int x) {
        int t = 0;
        while (x != 0)
        {
            if (t >INT_MAX / 10 || t <(INT_MIN) / 10)
                return 0;
            t= t * 10 + x % 10;
            x /= 10;
        }
 
        return t;
    }

====================================================================
数组中重复的数字解决方法
在一个长度为n的数组里的所有数字都在0-n-1的范围内，数组中某些数字是重复的，但是不知道有几个数字重复了，也不知道每个数字重复了几次。
请找出数组中任意一个重复的数字。
例如，如果输入长度为7的数组{2,3,1,0,2,5,3}，那么对应的输出是重复的数字2或者3

int DuplicateInArray(int arr[],int size) {
  //确保参数传入正确
  if(arr == NULL || size <= 0) {
        return error;
  }

  //还要确保每个参数的范围都不大于size
  for(...) {
    ...
  }

  int i=0; 
  while(i<size) { 
    if(arr[i] == i) { 
      ++i; 
    } else { 
        if( arr[i] != arr[ arr[i] ] ) {
            swap(arr[i],arr[arr[i]]);
        } else {
        return arr[i];
      } 
    }
  }
  return -1; 
}

====================================================================

====================================================================

====================================================================

====================================================================

====================================================================

====================================================================

====================================================================

====================================================================

====================================================================

====================================================================

定义栈的数据结构，要求添加一个min函数，能够得到栈的最小元素。要求函数min、push以及pop的时间复杂度都是O(1)。
    while(cin>>n) {

        if(!minStack.empty() && minStack.top() <= n) {
            dataStack.push(n);
            minStack.push(minStack.top());
        } else {
            dataStack.push(n);
            minStack.push(n);
        }
        
        printf("当前栈的最小元素为：%d\n",minStack.top());
    }


====================================================================

斐波那契数列的第N项问题

一个台阶总共有n级，如果一次可以跳1级，也可以跳2级。求总共有 多少总跳法
首先我们考虑最简单的情况：如果只有1 级台阶，那显然只有一种跳法，如果有2 级台阶，那就有两种跳的方法了：一种是分两次跳，每次跳1 级；另外一种就是一次跳2 级。
现在我们再来讨论一般情况：我们把n 级台阶时的跳法看成是n 的函数，记为f(n)。当n>2 时，第一次跳的时候就有两种不同的选择：一是第一次只跳1 级，此时跳法数目等于后面剩下的n-1 级台阶的跳法数目，即为f(n-1)；另外一种选择是第一次跳2 级，此时跳法数目等于后面剩下的n-2 级台阶的跳法数目，即为f(n-2)。
因此n 级台阶时的不同跳法的总数f(n) = f(n-1) + f(n-2)。
我们把上面的分析用一个公式总结如下：
f(n) =  1  (n=1)
f(n) =  2  (n=2)
f(n) =f(n-1) + (f-2)  (n>2)
分析到这里，相信很多人都能看出这就是我们熟悉的Fibonacci 序列。(O(n))

递归法解决：
int JumpStep(int n)    
{    
    if (n <= 0)  return 0;    
    if (n == 1 || n == 2) return n;    
    
    return (JumpStep(n-1) + JumpStep(n-2));    
}

迭代法解决：
long long fibonacci(unsigned n) {
    int result[2] = {0,1};
    if(n<2)
        return result[n];

    long long minusone = 1;
    long long minustwo = 0;
    long long fibn = 0;

    for(unisgned int i = 2; i <= n; i++) {
        fibn = minusone + minustwo;
        minustwo = minusone;
        minusone = fibn;
    }

    return fibn;
}

====================================================================
atoi函数的实现
本题需要注意的有几个方面：
（1）检查输入参数，指针是否为NULL；
（2）去除字符串前面的空格
（3）处理正负符号
（4）数值部分计算要注意：第一个是处理溢出；第二个是处理字符串中出现非数字符号的情况
（5）整体的错误处理选择：如果函数正确执行，应该返回转换后的数字，所以，就不能使用return某个数字来表示某个错误，而应该定义一个全局的错误变量errno，并在出现不同错误的时候设置该变量。

由于单独处理正负号，所以数值计算的值number不应出现负值，当出现负值的时候说明发生了溢出，这时再根据前面的正负号判断是正溢出还是负溢出，如果是正溢出，则将该值赋为最大正数，在C++中是：std::numeric_limits<int>::max();如果是负溢出，则将该值赋值为最小负数即可。

//定义几个错误状态枚举  
enum Status{kValid = 0,kNULL,kOVERFLOW,kCHAR};  
int status = kValid;  
  
int strToInt(const char* str)  
{  
    /* 空指针检查 */  
    if (str == NULL)  
    {  
        status = kNULL;  
        return 0;  
    }  
  
    /* 处理字符串前面的几个空格 */  
    while(isspace(*str))  
        str++;  
  
    /* 正负号处理 */  
    int flag = 1;  
    if (*str == '-')  
    {  
        flag = -1;  
        str++;  
    }  
    else if (*str == '+')  
        str++;  
  
    /* 数值操作 */  
    int number = 0;  
    while(*str != '\0')  
    {  
        if (*str >= '0' && *str <= '9')  
        {  
            number = number * 10 + *str - '0';  
            /* 处理overflow，int类型的范围为[-2147483648,2147483647]*/  
            if (number < 0)  
            {  
                if(flag == 1)  
                    number = std::numeric_limits<int>::max();  
                else if (flag == -1)  
                    number = std::numeric_limits<int>::min();  
                status = kOVERFLOW;  
                return number;  
            }  
            str++;  
        }  
        else  
        {  
            /* 处理字符串中的非数字字符,策略是返回无效字符串状态 */  
            status = kCHAR;  
            break;  
        }  
    }  
    return number * flag;  
}

====================================================================

将一整数逆序后放入数组中，使用递归实现
void convert(int *result, int n) {
     if(n>=10)
         convert(result+1, n/10);
     *result = n%10;
}

====================================================================
递归实现回判断
int find(char *str, int n) {
     if(n<=1) return 1;
     else if(str[0]==str[n-1])   return find(str+1, n-2);
     else     return 0;
}

====================================================================

分解质因数
void prim(int m, int n) {
     if(m>n) {
         while(m%n != 0) n++;
         m /= n;
         prim(m, n);
         printf("%d*", n);
     }
}
prim(n,2);

====================================================================

strstr
const char* my_strstr(const char* sub, const char* dest) {
    if(sub == NULL) {
        return dest;
    }

    if(dest == NULL) {
        return NULL;
    }

    const char* psub = sub;
    const char* pdest = dest;
    const char* start = dest;
    while(*pdest) {
        if(*psub == *pdest) {
            start = pdest;
            while(*pdest && *psub && (*psub == *pdest)) {
                printf("*psub=%c *pdest=%c\n", *psub, *pdest);
                psub++;
                pdest++;
            }
            if(*psub == '\0') {
                return start;
            } else {
                return NULL;
            }
        }
        pdest++;
    }
return NULL;
}


====================================================================

已知strcpy函数的原型是
       char *strcpy(nanmachar *strDest, const char *strSrc);
       其中strDest是目的字符串，strSrc是源字符串。
（1）不调用C++/C的字符串库函数，请编写函数 strcpy
一定注意最后结束时一定要加一个\0结尾
char *strcpy(char *strDes, const char *string)  
{  
    if (string == NULL&&strDes == NULL)  
        return NULL;  
    char* address = strDes;  
    while (*string != '\0')  
        *(strDes++) = *(string++);  
    *strDes = '\0';//一定注意最后结束时一定要加一个\0结尾；  
    return address;//返回保存的strDes首地址;  
}

（2）strcpy能把strSrc的内容复制到strDest，为什么还要char * 类型的返回值？
答：为了实现链式表达式。
例如 int length = strlen( strcpy( strDest, “hello world”) );
====================================================================
memcpy
如果地址有重叠，就要从后向前拷贝
否则可以从前向后拷贝
void *Memcpy(void *dst, const void *src, size_t size)  
{  
    if (dst == NULL || src == NULL)  
        return NULL;  
      
    char *psrc;  
    char *pdst;  
  
    //地址重叠的情况  
    if ((src < dst) && (char*)src + size > (char *)dst)  
    {  
        psrc = (char*)src + size - 1;  
        pdst = (char*)dst + size - 1;  
        while(size--) //从后向前拷贝
        {  
            *pdst-- = *pdst--;  
        }  
    }else {  
        psrc = (char*)src;  
        pdst = (char*)dst;  
        while(size--)  
        {  
            *pdst++ = *psrc++;  
        }  
    }  
    return dst;  
  
} 
====================================================================
realloc(void *__ptr, size_t __size)：更改已经配置的内存空间，即更改由malloc()函数分配的内存空间的大小。
如果将分配的内存减少，realloc仅仅是改变索引的信息。
如果是将分配的内存扩大，则有以下情况：
1）如果当前内存段后面有需要的内存空间，则直接扩展这段内存空间，realloc()将返回原指针。
2）如果当前内存段后面的空闲字节不够，那么就使用堆中的第一个能够满足这一要求的内存块，将目前的数据复制到新的位置，并将原来的数据块释放掉，返回新的内存块位置。
3）如果申请失败，将返回NULL，此时，原来的指针仍然有效。

注意：如果调用成功，不管当前内存段后面的空闲空间是否满足要求，都会释放掉原来的指针，重新返回一个指针，虽然返回的指针有可能和原来的指针一样，即不能再次释放掉原来的指针。
====================================================================
10亿个数中找出最大的10000个数（topK问题）

先拿10000个数建最小堆，然后一次添加剩余元素，如果大于堆顶的数（10000中最小的），将这个数替换堆顶，并调整结构使之仍然是一个最小堆，这样，遍历完后，堆中的10000个数就是所需的最大的10000个。建堆时间复杂度是O（mlogm），算法的时间复杂度为O（nmlogm）（n为10亿，m为10000）。

优化的方法：可以把所有10亿个数据分组存放，比如分别放在1000个文件中。这样处理就可以分别在每个文件的10^6个数据中找出最大的10000个数，合并到一起在再找出最终的结果。

最大的K个数则建立最小堆
最小的K个数则建立最大堆
====================================================================
大数据常用技巧之位图法 BitMap

海量数据排序
从最简单的情况说起，如果要对90个小于100的不重复的正整数排序。用位图的思想就是先申请一块100bit的空间，第一遍遍历所有的数，将出现的数字在位图中对应的位置置为1；第二遍遍历位图，依次输出值为1的位对应的数字。先且不说这种情况出现的频率不是很高，就仅这种情况，还是有很多其他的排序算法有它们自己的优势（不用额外占用空间之类）。但更进一步，如果我们把数字范围放大，对1000,000,000中的900,000,000个不重复的正整数排序，由于需要的内存非常大，其他算法在不分治的情况下就很难再处理这个问题。而用位图法只需要1000000000/(8*1024*104)=119.2MB空间，对现在的计算机来说没有任何问题。

海量数据去重
看一个比较常见的面试题：在2.5亿个整数中找出不重复的整数，内存不足以放下算有的数。我们可以采用两位的位图法，为每个数分配两位，00表示没有出现，01表示出现一次，10表示出现多次，11没有意义。这样下来总共需要232∗2=1GB(这里没有限定整数的范围，所有把所有32位整数都考虑进去)的内存。接下去扫描着2.5亿个整数，查看位图中相对应的位，如果是00就变为01，如果是01就变为10，其他情况保持不变。扫描完成后仍为01的整数就是需要查找的数。

数据压缩
假设有这样一份数据，记录了全国1990-1999年出生的人的姓名和出生年月的键值对。假设正好有一千万人，那就要存储一千万个姓名和年份。如何运用Bitmap的思想来压缩数据呢。下面提供几种思路。

从人的角度来看，由于一共就只有10个年份，可以用4个bit将它们区分开。如0000表示1990年，1001表示1999年。那一个人的出生年份就可以用4个bit位来表示，进而一千万个年份就可以压缩为一千万个4位的bit组；从另一个角度来看这个问题，我们有10个年份，每个人要么是要么不是在这个年份出生。每个人对于年份来说就可以抽象为一个bit位，所以我们可以把一千万的年龄压缩为10个一千万位的bit组。这样压缩的力度不如按人的角度压缩的大，但从年份出发的问题会有一定的优势，如有哪些人是1990年出生的，只需遍历1990年对应的那个bit组就可以了。

可以看出来不管从哪个角度，bitmap的压缩都是建立在数据中存在大量的冗余数据的基础上的，如年份。而在上面的问题中，年份的分布是散乱的，那假如我们事先把数据进行了排序，把相同的出生年份的人排在一起，那数据就可以进一步压缩。这样一来就只要记录每个年份的人数，就可以根据下标来判断每个人的出生年份。

怎么压缩圣经？
圣经里面全部是ASCII字符，ASCII字符一共有128个，128 = 2^7
那么每个字符可以只用7bit来表示，相比较于每个char字符有8bit，能够适当的压缩空间

====================================================================

====================================================================
