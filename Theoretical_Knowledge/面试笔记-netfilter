NETFILTER框架：
五条链：
NF_INET_PRE_ROUTING — PRE_ROUTING链
NF_INET_LOCAL_IN — INPUT链
NF_INET_FORWARD — FORWARD链 
NF_INET_LOCAL_OUT — OUTPUT链
NF_INET_POST_ROUTING — POST_ROUTING链
从PRE_ROUTING链进来之后，需要做路由决策，以判断是需要进INPUT链还是FORWARD链

Netfiler的三个维度分别是：
协议类型：IPv4 IPv6等
HOOK点：就是五个HOOK点，PREROUTING，INPUT，FORWARD，OUTPUT，POSTROUTING
回调函数的优先级：数字越小，优先级越高，如-200的优先级高于-150的优先级

NETFILTER的返回值：
NF_ACCEPT：数据包可以被递送到网络堆栈的下一个模块
NF_DROP：数据包直接被丢弃，不再传输
NF_STOLEN：由hook函数接管数据包，不再由netfilter处理，一般涉及到改包，如镜像数据包时将源目的Mac对调然后直接发送出去
NF_QUEUE：数据包将被插入到用户空间的队列中如NFQ接口
NF_REPEAT：数据包由前一个模块继续处理
NF_STOP：完全接收该数据包，且后面的模块不再处理该数据包

NETFILTER维护的4张表：
raw表 > mangle表 > nat表 > filter表(默认)

PREROUTING链：raw表 mangle表 nat表
FORWARD链：mangle表 filter表
POSTROUTING链：mangle表 nat表
INPUT链：mangle表 filter表
OUTPUT链：raw表 mangle表 nat表 filter表

==============================================================================
nf_hooks二维数组用于存储不同协议簇在每个hook点上所注册的hook函数链
nf_hooks是一个类型为struct list_head的二维数组：
struct list_head nf_hooks[NFPROTO_NUMPROTO][NF_MAX_HOOKS]; [net\filter\core.c]
NFPROTO_NUMPROTO表示勾子关联的协议，可取值：
enum {  
    NFPROTO_UNSPEC =  0,  
    NFPROTO_IPV4   =  2,  
    NFPROTO_ARP    =  3,  
    NFPROTO_BRIDGE =  7,  
    NFPROTO_IPV6   = 10,  
    NFPROTO_DECNET = 12,  
    NFPROTO_NUMPROTO,  
};

二维数组nf_hooks[pf][hook]，pf对应协议簇，hook对应hook点(也就是5条链)
nf_hooks[PF_INET][NF_IP_PREROUTING]表示IPv4协议簇下的PREROUTING链

struct nf_hook_ops
{
        struct list_head list;                        //链表成员

        /* User fills in from here down. */
        nf_hookfn *hook;                        //链子函数指针
        struct module *owner;
        int pf;                                        //协议簇，对于ipv4而言，是PF_INET
        int hooknum;                                //hook类型
        /* Hooks are ordered in ascending priority. */
        int priority;                                //优先级
};
成员list用于链入全局勾子数组nf_hooks中，它一定在第一位，保证&nf_hook_ops->list的值与&nf_hook_ops相同。

==============================================================================

要增加新的钩子函数到Netfilter中相应的过滤点，我们要做的工作其实很简单：

1 编写自己的钩子函数

2 实例化一个struct nf_hook_ops{}结构，并对其进行适当的填充，第一个参数list并不是用户所关心的，初始化时必须设置成{NULL，NULL}

3 用nf_register_hook()函数将我们刚刚填充的nf_hook_ops结构体注册到相应的HOOK点上，即nf_hooks[prot][hooknum]

==============================================================================

注册一个HOOK：
#include <linux/module.h>
#include <linux/kernel.h>
#include <linux/netfilter.h>
#include <linux/netfilter_ipv4.h>

MODULE_LICENSE("Dual BSD/GPL");

static struct nf_hook_ops nfho;

//钩子函数，注意参数格式与开发环境源码树保持一致
unsigned int hook_func(const struct nf_hook_ops *ops, 
        struct sk_buff *skb,
        const struct net_device *in,
        const struct net_device *out,
        int (*okfn)(struct sk_buff *))
{
    return NF_DROP;//丢弃所有的数据包
}

static int __init hook_init(void)
{
    nfho.hook = hook_func;//关联对应处理函数
    nfho.hooknum = NF_INET_PRE_ROUTING;//2.6.22及以后的内核中，内核态编程需要使用这个
    nfho.pf = PF_INET;//ipv4，所以用这个
    nfho.priority = NF_IP_PRI_FIRST;//优先级，第一顺位，首先执行我们定义的函数

    nf_register_hook(&nfho);//注册

    return 0;
}

static void __exit hook_exit(void)
{
    nf_unregister_hook(&nfho);//注销
}

module_init(hook_init);
module_exit(hook_exit);

nf_hooks结构图：
NFPROTO_IPV4  NF_INET_LOCAL_IN <-->nf_hook_ops<-->nf_hook_ops...

=====================================================================================
其实PRE_ROUTING和LOCAL_OUT点可以看作是整个netfilter的入口，而POST_ROUTING和LOCAL_IN可以看作是其出口:
PRE_ROUTING --> LOCAL_IN
PRE_ROUTING --> FORWARD --> POST_ROUTING
LOCAL_OUT   --> POSTROUTING

==============================================================================

   1）、filter表

    该表是整个过滤系统中真正起“过滤”作用的地方。所有对数据包的过滤工作都在这个表里进行，也就是说用户如果需要对某种类型的数据包进行过滤拦截，那么最好在这个表中进行操作。filter表会在NF_IP_LOCAL_IN、NF_IP_FORWARD和NF_IP_LOCAL_OUT三个hook点注册钩子函数，也就是说所有配置到filer表中的规则只可能在这三个过滤点上进行设置。

    2）、nat表

    主要用于DNAT和SNAT和地址伪装等操作。用于修改数据包的源、目的地址。目前版本的内核中nat表监视四个hook点：NF_IP_PRE_ROUTING、NF_IP_LOCAL_IN/OUT、NF_IP_POST_ROUTING。但在真正的实际应用中，我们一般仅需要在nat表的PREROUTING和POSTROUTING点上注册钩子函数。该表有个特性：只有新连接的第一个数据包会经过这个表，随后该连接的所有数据包将按照第一个数据包的处理动作做同样的操作，这种特性是由连接跟踪机制来实现的。

    3）、mangle表

    该表主要用于对数据包的修改，诸如修改数据包的TOS、TTL等字段。同时该表还会对数据包打上一些特殊的标签以便结合TC等工具，实现诸如Qos等功能。该表监视所有的hook点。

==============================================================================

在 Netfilter 中规则是顺序存储的，一条rule规则主要包括三个部分：
ipt_entry：标准匹配结构，主要包含数据包的源、目的IP，出、入接口和掩码等；
ipt_entry_match：扩展匹配。一条rule规则可能有零个或多个ipt_entry_match结构；
ipt_entry_target：一条rule规则有且仅有一个target动作。就是当所有的标准匹配和扩展匹配都符合之后才来执行该target。

==============================================================================
标准匹配，它只会去检查数据包的IP地址，源目的接口，掩码等通用信息，不会用到ipt_entry_match{}。

对于以模块形式存在的扩展匹配，如iprange模块，ipp2p模块等，它们就得实现自己的ipt_match{}结构。
也就是说，如果你要开发一个新的match模块，那么就必须去实例化一个ipt_match{}结构体对象，并实现该结构体中相应的成员属性(其实主要都是一些些函数指针成员，你必须实现相应的函数体)，然后将该ipt_match{}对象挂在你的ipt_entry_match{}结构的match属性里。
扩展match通常以插件或模块的形式存在。
当我们在用户空间通过iptables命令设置规则时如果用到了-m  ‘name’ 参数时，那么此时‘name就是一个扩展匹配模块。
例如：
    iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
==============================================================================

标准target就是那些ACCEPT、DROP、REJECT等等之类的处理方式；

扩展target就是那些诸如DNAT、SNAT等以模块形式存在的target了；
例如：
    iptables -t nat -A POSTROUTING -s 192.168.180.0/24 -o eth1 -j SNAT –to-source 119.75.218.76 

对于标准的target，它是不需要ipt_target{}结构的，即ipt_entry_target{}中的target属性为NULL；
而对于我们自己扩展target是需要我们自己手工去实现ipt_target{}对象，并完成相关回调函数的编写。
对于ipt_target{}结构体中target回调函数的编写有一点要注意：
该函数必须向Netfilter框架返回IPT_CONTINUE、或者诸如NF_ACCEPT、NF_DROP之类的值。

==============================================================================

==============================================================================

==============================================================================

==============================================================================

==============================================================================
mangle表：
1）CONNMARK target的选项
选项 功能
–set-mark value[/mask] 给链接跟踪记录打标记。
–save-mark [–mask mask] 将数据包上的标记值记录到链接跟踪记录上。
–restore-mark [–mask mask] 重新设置数据包的nfmark值。

2）MARK target 的选项
选项 功能
–set-mark value 设置数据包的nfmark值。
–and-mark value 数据包的nfmark值和value进行按位与运算。
–or-mark value 数据包的nfmark值和value进行按或与运算。

应用到策略路由：
打mark：
iptables -t mangle -A PREROUTING -i eth0 -p tcp --dport 80 -j MARK --set-mark 1 
iptables -t mangle -A PREROUTING -i eth0 -p udp --dprot 53 -j MARK --set-mark 2
建表：
ip rule add from all fwmark 1 table 10 
ip rule add from all fwmark 2 table 20
策略路由：
ip route add default via 10.10.1.1 dev eth1 table 10 
ip route add default via 10.10.2.1 dev eth2 table 20

3）MARK match的选项
选项 功能
[!] –mark value[/mask] 数据包的nfmark值与value进行匹配，其中mask的值为可选的

CONNMARK与MARK结合使用：
//第1条规则就是完成了将链接跟踪上的标记记录到该连接上的每一个数据包中
iptables -A POSTROUTING -t mangle -j CONNMARK --restore-mark

//第2条规则判断数据包的标记，如果不为0，则直接ACCEPT。如果数据包上没有被打标记，则交由后面的规则进行匹配并打标记。这里
//为什么会出现经过了CONNMARK模块，数据包仍未被打标记呢？可以想到，如果一条链接的第1个数据包经过第1条规则处理之后，由于
//ct->mark为0，所以其数据包的标记skb->nfmark应该仍旧为0，就需要进行后面规则的匹配。
iptables -A POSTROUTING -t mangle -m mark ! --mark 0 -j ACCEPT

//第3~5条规则，则按照匹配选项对符合规则的数据包打上不同的标记
iptables -A POSTROUTING -m mark --mark 0 -p tcp --dport 21 -t mangle -j MARK --set-mark 1
iptables -A POSTROUTING -m mark --mark 0 -p tcp --dport 80 -t mangle -j MARK --set-mark 2
iptables -A POSTROUTING -m mark --mark 0 -t mangle -p tcp -j MARK --set-mark 3 

//第6条规则，则是把之前打的标记信息保存到ct里.
iptables -A POSTROUTING -t mangle -j CONNMARK --save-mark

==============================================================================

柔性数组既数组大小待定的数组， C语言中结构体的最后一个元素可以是大小未知的数组，也就是所谓的0长度，所以我们可以用结构体来创建柔性数组。
它的主要用途是为了满足需要变长度的结构体，为了解决使用数组时内存的冗余和数组的越界问题。
在一个结构体的最后 ，申明一个长度为空的数组，就可以使得这个结构体是可变长的。对于编译器来说，此时长度为0的数组并不占用空间，因为数组名本身不占空间，它只是一个偏移量， 数组名这个符号本身代 表了一个不可修改的地址常量 （注意：数组名永远都不会是指针！ ），但对于这个数组的大小，我们可以进行动态分配,对于编译器而言，数组名仅仅是一个符号，它不会占用任何空间，它在结构体中，只是代表了一个偏移量，代表一个不可修改的地址常量！
typedef struct _SoftArray{
int len;
int array[];
}SoftArray;
int main()
{
    int len=10,i=0;
    
    SoftArray *p=(SoftArray*)malloc(sizeof(SoftArray)+sizeof(int)*len);
    p->len=len;
    
    for(i=0;i<p->len;i++)
   {
        p->array[i]=i+1;
    }
    for(i=0;i<p->len;i++)
   {
        printf("%d\n",p->array[i]);
    }

    free(p);

    return 0;
}
结构体中使用柔性数组，可以一次性将所需的内存空间申请出来(所以内存是连续的，内存碎片也减少了)，因为如果是以指针形式声明的，那么就必须做两次内存申请(结构体一次，成员s一次)
