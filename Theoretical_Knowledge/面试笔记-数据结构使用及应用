==============================================================================
互联网公司常见的面试算法题
https://www.zhihu.com/question/24964987

==============================================================================

二叉树两个节点之间距离?
假设给定的节点为node1,node2,可以分为下面的两种情况：
1）node1是node2的祖先节点或孩子结点，可以理解为两个节点在一条线上。例如：Dist(2,4),Dist(6,1)
2）node1和node2没有直接或间接的父子关系。例如，Dist(4,3)，他们需要一个共同的祖先结点1连接起来
假设lca是两个节点的最低公共祖先节点：
Dist(n1,n2)=Dist(root,n1)+Dist(root,n2)-2*Dist(root,lca)
这个公式已经涵盖了上面的两种情况。先找出lca,再求root节点到某个节点的距离就比较简单了。

计算一个二叉树的最大距离有两个情况：
情况1: 路径经过左子树的最深节点，通过根节点，再到右子树的最深节点。
情况2: 路径不穿过根节点，而是左子树或右子树的最大距离路径，取其大者。
只需要计算这两个情况的路径距离，并取其大者，就是该二叉树的最大距离。

==============================================================================

realloc(void *__ptr, size_t __size)：更改已经配置的内存空间，即更改由malloc()函数分配的内存空间的大小。
如果将分配的内存减少，realloc仅仅是改变索引的信息。
如果是将分配的内存扩大，则有以下情况：
1）如果当前内存段后面有需要的内存空间，则直接扩展这段内存空间，realloc()将返回原指针。
2）如果当前内存段后面的空闲字节不够，那么就使用堆中的第一个能够满足这一要求的内存块，将目前的数据复制到新的位置，并将原来的数据块释放掉，返回新的内存块位置。
3）如果申请失败，将返回NULL，此时，原来的指针仍然有效。

注意：如果调用成功，不管当前内存段后面的空闲空间是否满足要求，都会释放掉原来的指针，重新返回一个指针，虽然返回的指针有可能和原来的指针一样，即不能再次释放掉原来的指针。

==============================================================================

SPF算法描述：
算法思想：设G=(V,E)是一个带权有向图，把图中顶点集合V分成两组，第一组为已求出最短路径的顶点集合（用S表示，初始时S中只有一个源点，以后每求得一条最短路径 , 就将加入到集合S中，直到全部顶点都加入到S中，算法就结束了），第二组为其余未确定最短路径的顶点集合（用U表示），按最短路径长度的递增次序依次把第二组的顶点加入S中。在加入的过程中，总保持从源点v到S中各顶点的最短路径长度不大于从源点v到U中任何顶点的最短路径长度。此外，每个顶点对应一个距离，S中的顶点的距离就是从v到此顶点的最短路径长度，U中的顶点的距离，是从v到此顶点只包括S中的顶点为中间顶点的当前最短路径长度。

算法步骤：

a.初始时，S只包含源点，即S＝{v}，v的距离为0。U包含除v外的其他顶点，即:U={其余顶点}，若v与U中顶点u有边，则<u,v>正常有权值，若u不是v的出边邻接点，则<u,v>权值为∞。

b.从U中选取一个距离v最小的顶点k，把k，加入S中（该选定的距离就是v到k的最短路径长度）。

c.以k为新考虑的中间点，修改U中各顶点的距离；若从源点v到顶点u的距离（经过顶点k）比原来距离（不经过顶点k）短，则修改顶点u的距离值，修改后的距离值的顶点k的距离加上边上的权。

d.重复步骤b和c直到所有顶点都包含在S中。

==============================================================================

struct的首地址即为第一个元素的首地址
给定结构体中的某个元素的地址，可以计算出这个结构体的起始地址：
#define STRUCT_OFFSET(id, element) ((unsigned long) &((struct id*)0)->element)
通过宏STRUCT_OFFSET来计算结构体元素与结构体首地址之间的偏移，然后用结构体元素的地址减去偏移就可以获得结构体的地址

内核中container_of的计算：
计算的方法其实很简单，就是用该成员变量的指针减去它相对于结构体起始位置的偏移量。
#define container_of(ptr, type, member) (
{                      \
    const typeof( ((type *)0)->member ) *__mptr = (ptr);    \
    (type *)( (char *)__mptr - offsetof(type,member) );
}
)
==============================================================================

sizeof是一个宏，不是函数，strlen是一个函数，sizeof的实现利用的是指针步长的特性
针对类型的sizeof #define _sizeof(T) (size_t)((T*)0 + 1)
针对变量名的sizeof #define array_sizeof(T) ((size_t)(&T + 1)) - ((size_t)(&T))
printf("int length = %lu\n", _sizeof(int));
printf("int a length = %lu\n", array_sizeof(a));
printf("int[10] length = %lu\n", array_sizeof(b));

==============================================================================

柔性数组即数组大小待定的数组，C语言中结构体的最后一个元素可以是大小未知的数组，也就是所谓的0长度，所以我们可以用结构体来创建柔性数组。
它的主要用途是为了满足需要变长度的结构体，为了解决使用数组时内存的冗余和数组的越界问题。
在一个结构体的最后 ，申明一个长度为空的数组，就可以使得这个结构体是可变长的。对于编译器来说，此时长度为0的数组并不占用空间，因为数组名本身不占空间，它只是一个偏移量， 数组名这个符号本身代 表了一个不可修改的地址常量 （注意：数组名永远都不会是指针！ ），但对于这个数组的大小，我们可以进行动态分配,对于编译器而言，数组名仅仅是一个符号，它不会占用任何空间，它在结构体中，只是代表了一个偏移量，代表一个不可修改的地址常量！
typedef struct _SoftArray{
int len;
int array[];
}SoftArray;
int main()
{
    int len=10,i=0;
    
    SoftArray *p=(SoftArray*)malloc(sizeof(SoftArray)+sizeof(int)*len);
    p->len=len;
    
    for(i=0;i<p->len;i++)
   {
        p->array[i]=i+1;
    }
    for(i=0;i<p->len;i++)
   {  
        printf("%d\n",p->array[i]);
    }

    free(p);

    return 0;
}
结构体中使用柔性数组，可以一次性将所需的内存空间申请出来(所以内存是连续的，内存碎片也减少了)，因为如果是以指针形式声明的，那么就必须做两次内存申请(结构体一次，成员s一次)

==============================================================================

#与##的作用？
答：#是把宏参数转化为字符串的运算符，##是把两个宏参数连接的运算符。
例如：
#define STR(arg) #arg       则宏STR(hello)展开时为”hello”
#define NAME(y) name_y      则宏NAME(1)展开时仍为name_y
#define NAME(y) name_##y    则宏NAME(1)展开为name_1
#define DECLARE(name, type) typename##_##type##_type，
则宏DECLARE(val, int)展开为int val_int_type

==============================================================================
inline内联函数
答：
inline关键字仅仅是建议编译器做内联展开处理，即是将函数直接嵌入调用程序的主体，省去了调用/返回指令。
==============================================================================
malloc/free与new/delete的区别
malloc与free是C/C++语言的标准库函数，new/delete是C++的运算符。它们都可用于申请动态内存和释放内存。

malloc/free是库函数而不是运算符，不在编译器控制权限之内，不能够把执行构造函数和析构函数的任务强加于malloc/free。
因此C++语言需要一个能完成动态内存分配和初始化工作的运算符new，以及一个能完成清理与释放内存工作的运算符delete。

既然new/delete的功能完全覆盖了malloc/free，为什么C++不把malloc/free淘汰出局呢？这是因为C++程序经常要调用C函数，而C程序只能用malloc/free管理动态内存。
如果用free释放“new创建的动态对象”，那么该对象因无法执行析构函数而可能导致程序出错。如果用delete释放“malloc申请的动态内存”，结果也会导致程序出错，但是该程序的可读性很差。所以new/delete必须配对使用，malloc/free也一样。

malloc函数的实质体现在，它有一个将可用的内存块连接为一个长长的列表的所谓空闲链表。
调用malloc函数时，它沿连接表寻找一个大到足以满足 用户请求所需要的内存块。
然后，将该内存块一分为二（一块的大小与用户请求的大小相等，另一块的大小就是剩下的字节）。
接下来，将分配给用户的那块内存传给用户，并将剩下的那块（如果有的话）返回到连接表上。
调用free函数时，它将用户释放的内存块连接到空闲链上。
到最后，空闲链会被切成很多的小内存片段，如果这时用户申请一个大的内存片段，那么空闲链上可能没有可以满足用户要求的片段了。
于是，malloc函数请求延时，并开始在空闲链上翻箱倒柜地检 查各内存片段，对它们进行整理，将相邻的小空闲块合并成较大的内存块。

==============================================================================

malloc()分配内存的时候，可能调用brk()，也可能调用mmap2()。

分配：

1、即分配一块小型内存(小于或等于128kb)，malloc()会调用brk()调高断点(brk是将数据段(.data)的最高地址指针_edata往高地址推)，分配的内存在堆区域，
2、当分配一块大型内存(大于128kb),malloc()会调用mmap2()分配一块内存（mmap是在进程的虚拟地址空间中（一般是堆和栈中间）找一块空闲的）（一般是堆和栈中间区域）。

malloc分配的内存只分配了虚拟地址空间，当在第一次访问的时候，发生缺页中断，操作系统负责分配物理内存，并建立虚拟内存和物理内存之间的映射关系。

释放：同样的，
1、munmap释放内存映射方式分配的内存之后，内存马上会被系统收回（不会产生内存碎片），
2、释放brk分配的一块内存，并不会马上被系统回收(因为移动_edata指针时，只有最高位对应的虚拟内存释放了，才能往前移动，
当然，这块内存可以被再分配了。
==============================================================================
malloc(0)返回值
答：如果请求的长度为0，则标准C语言函数malloc返回一个null指针或不能用于访问对象的非null指针，该指针能被free安全使用。
==============================================================================
ASSERT()的作用
答:ASSERT()是一个调试程序时经常使用的宏，在程序运行时它计算括号内的表达式，如果表达式为FALSE (0), 程序将报告错误，并终止执行。如果表达式不为0，则继续执行后面的语句。这个宏通常原来判断程序中是否出现了明显非法的数据，如果出现了终止程序以免导致严重后果，同时也便于查找错误。例如，变量n在程序中不应该为0，如果为0可能导致错误

ASSERT只有在Debug版本中才有效，如果编译为Release版本则被忽略。
assert()的功能类似，它是ANSI C标准中规定的函数，它与ASSERT的一个重要区别是可以用在Release版本中。
==============================================================================
请问C++的类和C里面的struct有什么区别？
答:c++中的类具有成员保护功能，并且具有继承，多态这类oo特点，而c里的struct没有。c里面的struct没有成员函数,不能继承,派生等等.
==============================================================================
用预处理指令#define声明一个常数，用以表明1年中有多少秒（忽略闰年问题）
#defineSECONDS_PER_YEAR (60 * 60 * 24 * 365)UL（无符号长整型）
==============================================================================
volatile用在如下的几个地方：

1、中断服务程序中修改的供其它程序检测的变量需要加volatile；

2、多任务环境下各任务间共享的标志应该加volatile；

3、存储器映射的硬件寄存器通常也要加volatile说明，因为每次对它的读写都可能由不同意义；

uchar * volatile reg;
行代码里volatile修饰的是reg这个变量。所以这里实际上是定义了一个uchar类型的指针，并且这个指针变量本身是volatile 的。但是指针所指的内容并不是volatile的！

volatile uchar *reg;
这行代码里volatile修饰的是指针所指的内容。所以这里定义了一个uchar类型的指针，并且这个指针指向的是一个volatile的对象。但是指针变量本身并不是volatile的。

==============================================================================

==============================================================================

==============================================================================
结构体对齐原则：
原则一：结构体中元素是按照定义顺序一个一个放到内存中去的，但并不是紧密排列的。从结构体存储的首地址开始，每一个元素放置到内存中时，它都会认为内存是以它自己的大小来划分的，因此元素放置的位置一定会在自己宽度的整数倍上开始（以结构体变量首地址为0计算）。

原则二：在经过第一原则分析后，检查计算出的存储单元是否为所有元素中最宽的元素的长度的整数倍，是，则结束；若不是，则补齐为它的整数倍。

struct s1 {int a;char b;long c;}; 16字节
struct s3 {int a;long c;char b;}; 也是16字节
==============================================================================
32位操作系统
char ：1个字节(固定)
*(即指针变量): 4个字节(32位机的寻址空间是4个字节。同理64位编译器)(变化*)
short int : 2个字节(固定)
int： 4个字节(固定)
unsigned int : 4个字节(固定)
float: 4个字节(固定)
double: 8个字节(固定)
long: 4个字节
unsigned long: 4个字节(变化*,其实就是寻址控件的地址长度数值)
long long: 8个字节(固定)

64位操作系统
char ：1个字节(固定)
*(即指针变量): 8个字节
short int : 2个字节(固定)
int： 4个字节(固定)
unsigned int : 4个字节(固定)
float: 4个字节(固定)
double: 8个字节(固定)
long: 8个字节
unsigned long: 8个字节(变化*其实就是寻址控件的地址长度数值)
long long: 8个字节(固定)

==============================================================================

判断链表中是否有环：
设定两个指针，一个慢指针，一个快指针，快指针的速度是慢指针的两倍，然后呢，如果有环，他们一定会在环中相遇。 
用一个指针，从相遇点出发，当其再次回到相遇点时，其走过的长度就是环的长度
然后一个指针从链表的起始点，一个指针从链表中环的相遇点，当两个指针再次相遇时，相遇点就是环的入口点

==============================================================================

找到链表中第K个节点
p1和p2分别都是head指针，先将p2向右移动k次。
继续保持p1和p2等间距的右移，当p2的next为null，则证明p1所指的结点的值为倒数第k个节点的值

==============================================================================

找到链表的中间节点
定义两个指针，都指向链表的第一个成员，然后快的指针每次走两步，慢的指针每次走一步，当快指针指向的next为NULL即链表结点为奇数个的时候，或者，快指针快指针自身为空的时候停下，即链表元素为偶数个，此时的慢指针走了s步,则快指针走了2s步，则此时 慢指针所指向的结点为中间节点；

==============================================================================

extern有两个作用：
第一个,当它与"C"一起连用时，如: extern "C" void fun(int a, int b);则告诉编译器在编译fun这个函数名时按着C的规则去翻译相应的函数名而不是C++的，C++的规则在翻译这个函数名时会把fun这个名字变得面目全非，可能是fun@aBc_int_int#%$也可能是别的，这要看编译器的"脾气"了(不同的编译器采用的方法不一样)，为什么这么做呢，因为C++支持函数的重载啊，在这里不去过多的论述这个问题，如果你有兴趣可以去网上搜索，相信你可以得到满意的解释!
第二，当extern不与"C"在一起修饰变量或函数时，如在头文件中: extern int g_Int; 它的作用就是声明函数或全局变量的作用范围的关键字，其声明的函数和变量可以在本模块活其他模块中使用，记住它是一个声明不是定义!也就是说B模块(编译单元)要是引用模块(编译单元)A中定义的全局变量或函数时，它只要包含A模块的头文件即可,在编译阶段，模块B虽然找不到该函数或变量，但它不会报错，它会在连接时从模块A生成的目标代码中找到此函数。

在一个源文件里定义了一个数组：char a[6];
　　在另外一个文件里用下列语句进行了声明：extern char *a；
　　请问，这样可以吗？ 
　　答案与分析：
　　1)、不可以，程序运行时会告诉你非法访问。原因在于，指向类型T的指针并不等价于类型T的数组。extern char *a声明的是一个指针变量而不是字符数组，因此与实际的定义不同，从而造成运行时非法访问。应该将声明改为extern char a[ ]。
　　2)、例子分析如下，如果a[] = "abcd",则外部变量a=0x61626364 (abcd的ASCII码值)，*a显然没有意义
　　显然a指向的空间（0x61626364）没有意义，易出现非法内存访问。
　　3)、这提示我们，在使用extern时候要严格对应声明时的格式，在实际编程中，这样的错误屡见不鲜。
　　4)、extern用在变量声明中常常有这样一个作用，你在*.c文件中声明了一个全局的变量，这个全局的变量如果要被引用，就放在*.h中并用extern来声明。

//在.h文件的头上
#ifdef __cplusplus
#if __cplusplus
extern "C"{
　#endif
　#endif /* __cplusplus */ 
　…
　…
　//.h文件结束的地方
　#ifdef __cplusplus
　#if __cplusplus
}
#endif
#endif /* __cplusplus */ 

如果函数的声明中带有关键字extern，仅仅是暗示这个函数可能在别的源文件里定义，没有其它作用。即下述两个函数声明没有明显的区别：
extern int f(); 和int f();
当然，这样的用处还是有的，就是在程序中取代include “*.h”来声明函数

==============================================================================
在C语言中static的作用如下

第一、在修饰变量的时候，static修饰的静态局部变量只执行一次，而且延长了局部变量的生命周期，直到程序运行结束以后才释放。 
第二、static修饰全局变量的时候，这个全局变量只能在本文件中访问，不能在其它文件中访问，即便是extern外部声明也不可以。 
第三、static修饰一个函数，则这个函数的只能在本文件中调用，不能被其他文件调用。Static修饰的局部变量存放在全局数据区的静态变量区。初始化的时候自动初始化为0； 
（1）不想被释放的时候，可以使用static修饰。比如修饰函数中存放在栈空间的数组。如果不想让这个数组在函数调用结束释放可以使用static修饰 
（2）考虑到数据安全性（当程想要使用全局变量的时候应该先考虑使用static）
==============================================================================

在 1G 内存的计算机中能否 malloc(1.2G) ？为什么？

malloc能够申请的空间大小与物理内存的大小没有直接关系，仅与程序的虚拟地址空间相关。程序运行时，堆空间只是程序向操作系统申请划出来的一大块虚拟地址空间。应用程序通过malloc申请空间，得到的是在虚拟地址空间中的地址，之后程序运行所提供的物理内存是由操作系统完成的。
本题要申请空间的大小为 1.2G=2 30 × 1.2 Byte ，转换为十六进制约为 4CCC CCCC ，这个数值已经超过了 int 类型的表示范围，但还在unsigned 的表示范围。幸运的是 malloc 函数要求的参数为 unsigned 。

==============================================================================

0x01020304
小尾端 04 03 02 01
大尾端 01 02 03 04
int x=0x01;
if(*((char*)&x))
    小尾端
else
    大尾端

==============================================================================

与预编译指令相比，const修饰符有以下的优点：

1、预编译指令只是对值进行简单的替换，不能进行类型检查，define常量从未被编译器看见，因为在预处理截断就已经替换了；

2、可以保护被修饰的东西，防止意外修改，增强程序的健壮性

3、编译器通常不为普通const常量分配存储空间，而是将它们保存在符号表中，这使得它成为一个编译期间的常量，没有了存储与读内存的操作，使得它的效率也很高。define是字符替换，有多少地方使用，就会替换多少次，不会分配内存。

const修饰指针时：
主要看const在*的前后，在前则指针指向的内容为常量，在后则指针本身为常量；
const int *ptr;  //*ptr为常量；
int const *ptr;  //*ptr为常量；
int* const ptr;  //ptr为常量；
const int * const ptr;  //*ptr、ptr均为常量

const修饰成员变量：
const数据成员只在某个对象生存期内是常量，而对于整个类而言却是可变的。因为类可以创建多个对象，不同的对象其const数据成员的值可以不同。
所以不能在类声明中初始化const数据成员，因为类的对象未被创建时，编译器不知道const 数据成员的值是什么。
const数据成员的初始化只能在类的构造函数的初始化表中进行。

const修饰类的成员函数
一般const写在函数的后面，形如：void func() const;
const成员函数，不能修改对象中的成员变量，也不能调用类中任何非const成员函数；
对于const类对象，只能调用类中的const成员函数，所以const修饰成员函数的作用主要就是限制对const对象的使用。
任何不会修改数据成员的函数都因该声明为const类型。
如果在编写const成员函数时，不慎修改了数据成员，或者调用了其他非const成员函数，编译器将报错，这大大提高了程序的健壮性。

==============================================================================

二分查找的基本思想是将n个元素分成大致相等的两部分，去a[n/2]与x做比较，如果x=a[n/2],则找到x,算法中止；如果x<a[n/2],则只要在数组a的左半部分继续搜索x,如果x>a[n/2],则只要在数组a的右半部搜索x.

时间复杂度无非就是while循环的次数！

总共有n个元素，

渐渐跟下去就是n,n/2,n/4,....n/2^k，其中k就是循环的次数

由于你n/2^k取整后>=1

即令n/2^k=1

可得k=log2n,（是以2为底，n的对数）

所以时间复杂度可以表示O()=O(logn)
==============================================================================

a[-1] = 999; //数组不会检查越界错误
printf("*(a-1)=%d\n", *(a-1));//打印为999

==============================================================================
栈
队列
链表
数组
二叉树
动态规划
背包问题
LCS

==============================================================================
linux内核数据结构之kfifo
Linux内核的kfifo是一个环形队列，可以用来当作环形缓冲区

kfifo的数据结构：
struct kfifo {
    unsigned char *buffer;     /* the buffer holding the data */
    unsigned int size;         /* the size of the allocated buffer */
    unsigned int in;           /* data is added at offset (in % size) */
    unsigned int out;          /* data is extracted from off. (out % size) */
    spinlock_t *lock;          /* protects concurrent modifications */
};

smp_mb()            适用于多处理器的内存屏障。 
smp_rmb()           适用于多处理器的读内存屏障。 
smp_wmb()           适用于多处理器的写内存屏障。

kfifo提供的方法有：
//根据给定buffer创建一个kfifo
struct kfifo *kfifo_init(unsigned char *buffer, unsigned int size,
                gfp_t gfp_mask, spinlock_t *lock);

//给定size分配buffer和kfifo
struct kfifo *kfifo_alloc(unsigned int size, gfp_t gfp_mask,
                 spinlock_t *lock);
//释放kfifo空间
void kfifo_free(struct kfifo *fifo)

//向kfifo中添加数据
unsigned int kfifo_put(struct kfifo *fifo,
                const unsigned char *buffer, unsigned int len)
//从kfifo中取数据
unsigned int kfifo_gut(struct kfifo *fifo,
                const unsigned char *buffer, unsigned int len)

//获取kfifo中有数据的buffer大小
unsigned int kfifo_len(struct kfifo *fifo)

在kfifo_init和kfifo_calloc中，kfifo->size的值总是在调用者传进来的size参数的基础上向2的幂扩展，这是内核一贯的做法。
这样的好处不言而喻--对kfifo->size取模运算可以转化为与运算，如：
kfifo->in % kfifo->size 可以转化为 kfifo->in & (kfifo->size-1)

kfifo的巧妙之处在于in和out定义为无符号类型，
在put和get时，in和out都是增加，当达到最大值时，产生溢出，使得从0开始，进行循环使用。

一开始，buffer为空，in和out都在左边界
当放入数据时，in向右边移动，out仍在左边界
当取出数据时，out向右边移动，in仍在原位
当数据全部被取完时，in和out重合，此时缓冲区恢复为空，in和out被重新置位到左边界0
每次put时，in都会增加，直到in溢出转为0
每次get时，out都会增加，知道out溢出转为0
确定in和out在buffer长度中的下标靠in和out对size取余实现
in和out在增加的过程中不需要关心他们是否超过某个边界，因为作为无符号整型，当溢出时会自动回转

//put的对外接口
static inline unsigned int kfifo_put(struct kfifo *fifo,
                const unsigned char *buffer, unsigned int len) {

    unsigned long flags;
    unsigned int ret;
    spin_lock_irqsave(fifo->lock, flags);//加锁
    ret = __kfifo_put(fifo, buffer, len);
    spin_unlock_irqrestore(fifo->lock, flags);//解锁
    return ret;
}

//get的对外接口
static inline unsigned int kfifo_get(struct kfifo *fifo,
                     unsigned char *buffer, unsigned int len) {

    unsigned long flags;
    unsigned int ret;
    spin_lock_irqsave(fifo->lock, flags); //加锁
    ret = __kfifo_get(fifo, buffer, len);
    
    /*
        当fifo->in == fifo->out时，buffer为空
    */
    if (fifo->in == fifo->out)
        fifo->in = fifo->out = 0;
    spin_unlock_irqrestore(fifo->lock, flags); //解锁
    return ret;
}

//put的实现
unsigned int __kfifo_put(struct kfifo *fifo,
            const unsigned char *buffer, unsigned int len)
{
    unsigned int l;
    
    /*
        buffer中空的长度，也就是最多能放下的长度
        fifo->size - fifo->in + fifo->out
        ==> fifo->size - (fifo->in - fifo->out)
        每次put时，in都会增加，直到in溢出转为0
        每次get时，out都会增加，知道out溢出转为0
        确定in和out在buffer长度中的下标靠in和out对size取余实现
        in的值肯定会一直大于out，
        in-out表示当前实际数据的长度
    */
    len = min(len, fifo->size - fifo->in + fifo->out);

    /*
     * Ensure that we sample the fifo->out index -before- we
     * start putting bytes into the kfifo.
     */
    smp_mb();

    /* 
       first put the data starting from fifo->in to buffer end 
       首先获取从in开始到右边界的长度，其中
       fifo->in & (fifo->size - 1) 表示的意义为 fifo->in % (fifo->size)
       即in的下标对整个长度size取余
       就是in此时实际的下标，
       先将in到右边界的部分填满
    */
    l = min(len, fifo->size - (fifo->in & (fifo->size - 1)));
    /*
       fifo->buffer + (fifo->in & (fifo->size - 1))表示的是此时in的位置
    */
    memcpy(fifo->buffer + (fifo->in & (fifo->size - 1)), buffer, l);

    /* 
        then put the rest (if any) at the beginning of the buffer 
        然后将剩下的部分填入左边界到out之间
    */
    memcpy(fifo->buffer, buffer + l, len - l);

    /*
     * Ensure that we add the bytes to the kfifo -before-
     * we update the fifo->in index.
     */
    smp_wmb();

    /*
        每次累加，in对size取余即可以获取当前in在buffer中的实际的下标位置
        当in溢出时，会自动转换为0，因此in的值每次只需要累加就可以，不用关心in是否会越界
    */
    fifo->in += len;
    return len;
}

unsigned int __kfifo_get(struct kfifo *fifo,
             unsigned char *buffer, unsigned int len)
{
    unsigned int l;
    /*
        每次put时，in都会增加，直到in溢出转为0
        每次get时，out都会增加，知道out溢出转为0
        确定in和out在buffer长度中的下标靠in和out对size取余实现
        in的值肯定会一直大于out，
        in-out表示当前实际数据的长度
    */
    len = min(len, fifo->in - fifo->out);

    /*
     * Ensure that we sample the fifo->in index -before- we
     * start removing bytes from the kfifo.
     */
    smp_rmb();

    /* 
        first get the data from fifo->out until the end of the buffer 
        首先通过(fifo->out & (fifo->size - 1))获取out在buffer长度中的实际的下标位置
        然后fifo->size - (fifo->out & (fifo->size - 1))可以获得out到右边界之间一共有多少数据
    */
    l = min(len, fifo->size - (fifo->out & (fifo->size - 1)));

    /*
        先将out到右边界的数据拷贝到目标缓冲区中
    */
    memcpy(buffer, fifo->buffer + (fifo->out & (fifo->size - 1)), l);

    /* 
        then get the rest (if any) from the beginning of the buffer
        然后将剩下需要拷贝的数据长度拷贝到目标缓冲区 
    */
    memcpy(buffer + l, fifo->buffer, len - l);

    /*
     * Ensure that we remove the bytes from the kfifo -before-
     * we update the fifo->out index.
     */
    smp_mb();

    /*
        每次累加，通过取余可以获取out在buffer中实际应该处于的下标
        当out溢出时，会自动转换为0，因此out的值每次只需要累加就可以，不用关心out是否会越界
    */
    fifo->out += len;
    return len;
}

==============================================================================

基于环形缓冲区的无锁队列
CAS操作——Compare & Set，或是 Compare & Swap，现在几乎所有的CPU指令都支持CAS的原子操作，X86下对应的是 CMPXCHG 汇编指令。
有了这个原子操作，我们就可以用其来实现各种无锁（lock free）的数据结构。

与CAS相似的还有下面的原子操作：
Fetch And Add，一般用来对变量做 +1 的原子操作 __sync_fetch_and_add
Test-and-set，写值到某个内存位置并传回其旧值。汇编指令BST
Test and Test-and-set，用来低低Test-and-Set的资源争夺情况

CAS 原语负责将某处内存地址的值（1 个字节）与一个期望值进行比较，如果相等，则将该内存地址处的值替换为新值，CAS 操作伪码描述如下：
Bool CAS(T* addr, T expected, T newValue) 
{ 
     if( *addr == expected ) 
    { 
         *addr =  newValue; 
          return true; 
    } 
    else 
          return false; 
}

在实际开发过程中，利用 CAS 进行同步，代码如下所示：
do{
       备份旧数据；
       基于旧数据构造新数据；
} while(!CAS( 内存地址，备份的旧数据，新数据 ))
当两者进行比较时，如果相等，则证明共享数据没有被修改，替换成新值，然后继续往下运行；
如果不相等，说明共享数据已经被修改，放弃已经所做的操作，然后重新执行刚才的操作。
容易看出 CAS 操作是基于共享数据不会被修改的假设，采用了类似于数据库的 commit-retry 的模式。
当同步冲突出现的机会很少时，这种假设能带来较大的性能提升。


