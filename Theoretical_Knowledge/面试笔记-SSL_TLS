1、客户端请求建立SSL链接，并向服务端发送一个随机数–Client random和客户端支持的加密方法，比如RSA公钥加密，此时是明文传输。 
2、服务端回复一种客户端支持的加密方法、一个随机数–Server random、授信的服务器证书和非对称加密的公钥。 
3、客户端收到服务端的回复后利用服务端的公钥，加上新的随机数–Premaster secret 通过服务端下发的公钥及加密方法进行加密，发送给服务器。 
4、服务端收到客户端的回复，利用已知的加解密方式进行解密，同时利用Client random、Server random和Premaster secret通过一定的算法生成HTTP链接数据传输的对称加密key – session key。

此后的HTTP链接数据传输即通过对称加密方式进行加密传输
==============================================================================

SSL握手详细过程：
一、客户端发出加密通信请求ClientHello
提供： 
1，协议版本（如TSL1.0） 
2，随机数1（用于生成对话密钥） 
3，支持的加密方法（如RSA公钥加密） 
4，支持的压缩方法

二、服务器回应SeverHello
回应内容： 
1，确认使用的加密通信协议版本（TSL1.0） 
2，随机数2（用于生成对话密钥） 
3，确认加密方法（RSA） 
4，服务器证书（包含非对称加密的公钥） 
5，（可选）要求客户端提供证书的请求

三、客户端验证证书
如果证书不是可信机构颁布，或证书域名与实际域名不符，或者证书已经过期，就会向访问者显示一个警告，是否继续通信
使用CA的公钥解密签名，然后使用相同的签名函数对待签名证书内容进行签名,并和服务端数字签名里的签名内容进行比较(比较哈希值)，如果相同就认为校验成功。

四、客户端回应
证书没有问题，就会取出证书中的服务器公钥 
然后发送： 
1，随机数3（pre-master key，此随机数用服务器公钥加密，防止被窃听） 
2，编码改变通知（表示随后的信息都将用双方商定的方法和密钥发送） 
3，客户端握手结束通知

五、双方生成会话密钥
双方同时有了三个随机数，接着就用事先商定的加密方法，各自生成同一把“会话密钥” 
服务器端用自己的私钥（非对称加密的）获取第三个随机数，会计算生成本次所用的会话密钥（对称加密的密钥），如果前一步要求客户端证书，会在这一步验证

六、服务器最后响应
服务器生成会话密钥后，向客户端发送： 
1，编码改变通知（后面的信息都用双方的加密方法和密钥来发送） 
2，服务器握手结束通知

至此，握手阶段全部结束，接下来客户端与服务器进入加密通信，用会话密钥加密内容

==============================================================================

为什么一定要用三个随机数，来生成"会话密钥"？
不管是客户端还是服务器，都需要随机数，这样生成的密钥才不会每次都一样。
由于SSL协议中证书是静态的，因此十分有必要引入一种随机因素来保证协商出来的密钥的随机性。
对于RSA密钥交换算法来说，pre-master-key本身就是一个随机数，再加上hello消息中的随机，三个随机数通过一个密钥导出器最终导出一个对称密钥。
pre master的存在在于SSL协议不信任每个主机都能产生完全随机的随机数，如果随机数不随机，那么pre master secret就有可能被猜出来，那么仅适用pre master secret作为密钥就不合适了，因此必须引入新的随机因素，那么客户端和服务器加上pre master secret三个随机数一同生成的密钥就不容易被猜出了，一个伪随机可能完全不随机，可是是三个伪随机就十分接近随机了，每增加一个自由度，随机性增加的可不是一。

==============================================================================

数字签名的制作和验证过程如下：
数字签名的签发。首先是使用哈希函数对待签名内容进行安全哈希，生成消息摘要，然后使用CA自己的私钥对消息摘要进行加密。
数字签名的校验。使用CA的公钥解密签名，然后使用相同的签名函数对待签名证书内容进行签名,
并和服务端数字签名里的签名内容进行比较(比较哈希值)，如果相同就认为校验成功。

==============================================================================

1. 加密算法是可逆的，用来对敏感数据进行保护。散列算法(签名算法、哈希算法)是不可逆的，主要用于身份验证。
2. 对称加密算法使用同一个密匙加密和解密，速度快，适合给大量数据加密。对称加密客户端和服务端使用同一个密匙，存在被抓包破解的风险。
3. 非对称加密算法使用公钥加密，私钥解密，私钥签名，公钥验签。安全性比对称加密高，但速度较慢。非对称加密使用两个密匙，服务端和客户端密匙不一样，私钥放在服务端，黑客一般是拿不到的，安全性高。
4. Base64不是安全领域下的加解密算法，只是一个编码算法，通常用于把二进制数据编码为可写的字符形式的数据，特别适合在http，mime协议下的网络快速传输数据。UTF-8和GBK中文的Base64编码结果是不同的。采用Base64编码不仅比较简短，同时也具有不可读性，即所编码的数据不会被人用肉眼所直接看到，但这种方式很初级，很简单。Base64可以对图片文件进行编码传输。
5. https协议广泛用于万维网上安全敏感的通讯，例如交易支付方面。它的主要作用可以分为两种：一种是建立一个信息安全通道，来保证数据传输的安全；另一种就是确认网站的真实性。
6. 大量数据加密建议采用对称加密算法，提高加解密速度；小量的机密数据，可以采用非对称加密算法。在实际的操作过程中，我们通常采用的方式是：采用非对称加密算法管理对称算法的密钥，然后用对称加密算法加密数据，这样我们就集成了两类加密算法的优点，既实现了加密速度快的优点，又实现了安全方便管理密钥的优点。
7. MD5标准密钥长度128位（128位是指二进制位。二进制太长，所以一般都改写成16进制，每一位16进制数可以代替4位二进制数，所以128位二进制数写成16进制就变成了128/4=32位。16位加密就是从32位MD5散列中把中间16位提取出来）；sha1标准密钥长度160位(比MD5摘要长32位)，Base64转换后的字符串理论上将要比原来的长1/3。

==============================================================================

==============================================================================

==============================================================================

==============================================================================

==============================================================================

==============================================================================

